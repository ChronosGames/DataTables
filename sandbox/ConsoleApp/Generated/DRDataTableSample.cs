// <auto-generated />
#pragma warning disable CS0105
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
#pragma warning disable CS8602 // Dereference of a possibly null reference.

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using DataTables;


#nullable enable

namespace ConsoleApp
{
public sealed partial class DTDataTableSample : DataTable<DRDataTableSample>
{
    private Dictionary<int, DRDataTableSample> m_Dict1 = new Dictionary<int, DRDataTableSample>();
    private Dictionary<ConsoleApp.ColorT, DRDataTableSample> m_Dict2 = new Dictionary<ConsoleApp.ColorT, DRDataTableSample>();
    private Dictionary<ValueTuple<int, short>, DRDataTableSample> m_Dict3 = new Dictionary<ValueTuple<int, short>, DRDataTableSample>();

    private Dictionary<ValueTuple<string, bool>, List<DRDataTableSample>> m_Dict4 = new Dictionary<ValueTuple<string, bool>, List<DRDataTableSample>>();
    private Dictionary<string, List<DRDataTableSample>> m_Dict5 = new Dictionary<string, List<DRDataTableSample>>();

    public DTDataTableSample(string name, int capacity) : base(name, capacity) { }

    protected override void InternalAddDataRow(int index, DRDataTableSample dataRow)
    {
        base.InternalAddDataRow(index, dataRow);

        m_Dict1.Add(dataRow.Id, dataRow);
        m_Dict2.Add(dataRow.Color, dataRow);
        m_Dict3.Add((dataRow.Id, dataRow.Int16Value), dataRow);
        {
            if (m_Dict4.TryGetValue((dataRow.Name, dataRow.BoolValue), out var arr))
            {
                arr.Add(dataRow);
            }
            else
            {
                arr = new List<DRDataTableSample>();
                arr.Add(dataRow);
                m_Dict4.Add((dataRow.Name, dataRow.BoolValue), arr);
            }
        }
        {
            if (m_Dict5.TryGetValue(dataRow.Name, out var arr))
            {
                arr.Add(dataRow);
            }
            else
            {
                arr = new List<DRDataTableSample>();
                arr.Add(dataRow);
                m_Dict5.Add(dataRow.Name, arr);
            }
        }
    }

    #region Instance API

    /// <summary>
    /// 根据索引获取数据行 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DRDataTableSample? GetDataRowById(int id)
    {
        if (m_Dict1.TryGetValue(id, out var result))
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: id={0}", id);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据索引获取数据行 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DRDataTableSample? GetDataRowByColor(ConsoleApp.ColorT color)
    {
        if (m_Dict2.TryGetValue(color, out var result))
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: color={0}", color);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据索引获取数据行 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DRDataTableSample? GetDataRowByIdAndInt16Value(int id, short int16Value)
    {
        if (m_Dict3.TryGetValue((id, int16Value), out var result))
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: id={0}, int16Value={1}", id, int16Value);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据分组获取数据行列表 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public List<DRDataTableSample>? GetDataRowsGroupByNameAndBoolValue(string name, bool boolValue)
    {
        return m_Dict4.TryGetValue((name, boolValue), out var result) ? result : null;
    }

    /// <summary>
    /// 根据分组获取数据行列表 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public List<DRDataTableSample>? GetDataRowsGroupByName(string name)
    {
        return m_Dict5.TryGetValue(name, out var result) ? result : null;
    }

    #endregion

    #region Static API

    /// <summary>
    /// 根据索引获取数据行 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static DRDataTableSample? GetRowById(int id)
    {
        var table = DataTableManager.GetDataTableInternal<DTDataTableSample>();
        if (table?.m_Dict1.TryGetValue(id, out var result) == true)
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: id={0}", id);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据索引获取数据行 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static DRDataTableSample? GetRowByColor(ConsoleApp.ColorT color)
    {
        var table = DataTableManager.GetDataTableInternal<DTDataTableSample>();
        if (table?.m_Dict2.TryGetValue(color, out var result) == true)
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: color={0}", color);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据索引获取数据行 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static DRDataTableSample? GetRowByIdAndInt16Value(int id, short int16Value)
    {
        var table = DataTableManager.GetDataTableInternal<DTDataTableSample>();
        if (table?.m_Dict3.TryGetValue((id, int16Value), out var result) == true)
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("DTDataTableSample not found index: id={0}, int16Value={1}", id, int16Value);
#endif
            return null;
        }
    }

    /// <summary>
    /// 根据分组获取数据行列表 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static List<DRDataTableSample>? GetRowsGroupByNameAndBoolValue(string name, bool boolValue)
    {
        var table = DataTableManager.GetDataTableInternal<DTDataTableSample>();
        return table?.m_Dict4.TryGetValue((name, boolValue), out var result) == true ? result : null;
    }

    /// <summary>
    /// 根据分组获取数据行列表 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static List<DRDataTableSample>? GetRowsGroupByName(string name)
    {
        var table = DataTableManager.GetDataTableInternal<DTDataTableSample>();
        return table?.m_Dict5.TryGetValue(name, out var result) == true ? result : null;
    }

    #endregion
}

/// <summary>示例表</summary>
public sealed partial class DRDataTableSample : DataRowBase
{

    /// <summary>整数</summary>
    public int Id { get; private set; }

    /// <summary>小整数</summary>
    public short Int16Value { get; private set; }

    /// <summary>大整数</summary>
    public long Int64Value { get; private set; }

    /// <summary>无符号大整数</summary>
    public ulong UInt64Value { get; private set; }

    /// <summary>字符串</summary>
    public string Name { get; private set; }

    /// <summary>布尔</summary>
    public bool BoolValue { get; private set; }

    /// <summary>枚举</summary>
    public ConsoleApp.ColorT Color { get; private set; }

    /// <summary>数组</summary>
    public int[] ArrayValue { get; private set; }

    public override bool Deserialize(BinaryReader reader)
    {
        Id = reader.Read7BitEncodedInt32();
        Int16Value = reader.ReadInt16();
        Int64Value = reader.Read7BitEncodedInt64();
        UInt64Value = reader.Read7BitEncodedUInt64();
        Name = reader.ReadString();
        BoolValue = reader.ReadBoolean();
        {
            ConsoleApp.ColorT __enumVal = default;
            var __enumStr = reader.ReadString();
            if (!string.IsNullOrEmpty(__enumStr) && !Enum.TryParse(__enumStr, out __enumVal))
            {
                throw new ArgumentException();
            }
            Color = __enumVal;
        }
        {
            var __ArrayValue_Count1 = reader.Read7BitEncodedInt32();
            ArrayValue = new int[__ArrayValue_Count1];
            for (int x1 = 0; x1 < __ArrayValue_Count1; x1++)
            {
                int key1;
                key1 = reader.Read7BitEncodedInt32();
                ArrayValue[x1] = key1;
            }
        }
        return true;
    }
}

}
