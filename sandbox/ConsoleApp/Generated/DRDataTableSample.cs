// <auto-generated />
#pragma warning disable CS0105

using System;
using System.IO;
using System.Collections.Generic;
using DataTables;

namespace ConsoleApp
{
    public sealed class DTDataTableSample : DataTable<DRDataTableSample>
    {
        private Dictionary<int, DRDataTableSample> m_Dict1 = new Dictionary<int, DRDataTableSample>();
        private MultiDictionary<int, short, DRDataTableSample> m_Dict2 = new MultiDictionary<int, short, DRDataTableSample>();
        private MultiDictionary<string, bool, List<DRDataTableSample>> m_Dict3 = new MultiDictionary<string, bool, List<DRDataTableSample>>();
        public DRDataTableSample GetDataRowById(int Id)
        {
            return m_Dict1.TryGetValue(Id, out var result) ? result : null;
        }
        public DRDataTableSample GetDataRowByIdAndInt16Value(int Id, short Int16Value)
        {
            return m_Dict2.TryGetValue(Id, Int16Value, out var result) ? result : null;
        }
        public List<DRDataTableSample> GetDataRowGroupByNameAndBoolValue(string Name, bool BoolValue)
        {
            return m_Dict3.TryGetValue(Name, BoolValue, out var result) ? result : null;
        }
        protected override void InternalAddDataRow(DRDataTableSample dataRow)
        {
            base.InternalAddDataRow(dataRow);
            m_Dict1.Add(dataRow.Id, dataRow);
            m_Dict2.Add(dataRow.Id, dataRow.Int16Value, dataRow);
            if (m_Dict3.TryGetValue(dataRow.Name, dataRow.BoolValue, out var arr))
            {
                arr.Add(dataRow);
            }
            else
            {
                arr = new List<DRDataTableSample>();
                arr.Add(dataRow);
                m_Dict3.Add(dataRow.Name, dataRow.BoolValue, arr);
            }
        }
    }

    /// <summary>示例表</summary>
    public sealed class DRDataTableSample : DataRowBase
    {
        /// <summary>整数</summary>
        public int Id { get; private set; }
        /// <summary>小整数</summary>
        public short Int16Value { get; private set; }
        /// <summary>大整数</summary>
        public long Int64Value { get; private set; }
        /// <summary>无符号大整数</summary>
        public ulong UInt64Value { get; private set; }
        /// <summary>字符串</summary>
        public string Name { get; private set; }
        /// <summary>布尔</summary>
        public bool BoolValue { get; private set; }
        /// <summary>枚举</summary>
        public ColorT Color { get; private set; }
        /// <summary>数组</summary>
        public int[] ArrayValue { get; private set; }
        /// <summary>枚举与整形的字典</summary>
        public Dictionary<ColorT, int> MapEnumToInt { get; private set; }
        /// <summary>枚举数组</summary>
        public ColorT[] EnumArray { get; private set; }

        public override bool Deserialize(BinaryReader reader)
        {
            Id = reader.Read7BitEncodedInt32();
            Int16Value = reader.ReadInt16();
            Int64Value = reader.Read7BitEncodedInt64();
            UInt64Value = reader.Read7BitEncodedUInt64();
            Name = reader.ReadString();
            BoolValue = reader.ReadBoolean();
            {
                ColorT __enumVal = default;
                var __enumStr = reader.ReadString();
                if (!string.IsNullOrEmpty(__enumStr) && !Enum.TryParse(__enumStr, out __enumVal))
                {
                    throw new ArgumentException();
                }
                Color = __enumVal;
            }
            {
                var __ArrayValue_Count1 = reader.Read7BitEncodedInt32();
                ArrayValue = new int[__ArrayValue_Count1];
                for (int x1 = 0; x1 < __ArrayValue_Count1; x1++)
                {
                    int key1;
                    key1 = reader.Read7BitEncodedInt32();
                    ArrayValue[x1] = key1;
                }
            }
            {
                MapEnumToInt = new Dictionary<ColorT, int>();
                var __MapEnumToInt_Count1 = reader.Read7BitEncodedInt32();
                for (int x1 = 0; x1 < __MapEnumToInt_Count1; x1++)
                {
                    ColorT key1;
                    {
                        ColorT __enumVal = default;
                        var __enumStr = reader.ReadString();
                        if (!string.IsNullOrEmpty(__enumStr) && !Enum.TryParse(__enumStr, out __enumVal))
                        {
                            throw new ArgumentException();
                        }
                        key1 = __enumVal;
                    }
                    int value1;
                    value1 = reader.Read7BitEncodedInt32();
                    MapEnumToInt.Add(key1, value1);
                }
            }
            {
                var __EnumArray_Count1 = reader.Read7BitEncodedInt32();
                EnumArray = new ColorT[__EnumArray_Count1];
                for (int x1 = 0; x1 < __EnumArray_Count1; x1++)
                {
                    ColorT key1;
                    {
                        ColorT __enumVal = default;
                        var __enumStr = reader.ReadString();
                        if (!string.IsNullOrEmpty(__enumStr) && !Enum.TryParse(__enumStr, out __enumVal))
                        {
                            throw new ArgumentException();
                        }
                        key1 = __enumVal;
                    }
                    EnumArray[x1] = key1;
                }
            }
            return true;
        }
    }
    
}
