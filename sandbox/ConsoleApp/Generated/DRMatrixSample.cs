// <auto-generated />
#pragma warning disable CS0105
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using DataTables;

#nullable enable

namespace ConsoleApp
{

public sealed partial class DTMatrixSample : DataMatrixBase<short, long, bool>
{
    protected override bool DefaultValue => true;

    public DTMatrixSample(string name, int capacity) : base(name, capacity)
    { }

    public override bool ParseDataRow(int index, BinaryReader reader)
    {
        short _key1;
        _key1 = reader.ReadInt16();

        long _key2;
        _key2 = reader.Read7BitEncodedInt64();

        bool _value;
        _value = reader.ReadBoolean();

        SetDataRow(index, _key1, _key2, _value);
        return true;
    }

    #region Instance API

    /// <summary>
    /// 根据Key1和Key2获取数据值 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool? GetDataRow(short key1, long key2)
    {
        return Get(key1, key2);
    }

    /// <summary>
    /// 根据Key1和Key2获取数据值，如果不存在则返回默认值 (实例方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool GetDataRowOrDefault(short key1, long key2)
    {
        var result = Get(key1, key2);
        return result != null ? result : DefaultValue;
    }

    #endregion

    #region Static API

    /// <summary>
    /// 获取数据矩阵实例 - 便于访问基类方法 (静态方法)
    /// </summary>
    public static DTMatrixSample Table
    {
        get
        {
            var table = DataTableManager.GetDataTableInternal<DTMatrixSample>();
            if (table == null)
            {
                throw new InvalidOperationException("DTMatrixSample not loaded. Call DataTableManager.CreateDataTable<DTMatrixSample>() first.");
            }
            return table;
        }
    }

    /// <summary>
    /// 安全获取数据矩阵实例 - 返回null如果未加载 (静态方法)
    /// </summary>
    public static DTMatrixSample? TableOrNull => DataTableManager.GetDataTableInternal<DTMatrixSample>();

    /// <summary>
    /// 检查数据矩阵是否已加载 (静态方法)
    /// </summary>
    public static bool IsLoaded => DataTableManager.IsLoaded<DTMatrixSample>();

    /// <summary>
    /// 根据Key1和Key2获取数据值 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool? GetRow(short key1, long key2)
    {
        var table = DataTableManager.GetDataTableInternal<DTMatrixSample>();
        return table?.Get(key1, key2);
    }

    /// <summary>
    /// 根据Key1和Key2获取数据值，如果不存在则返回默认值 (静态方法)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool GetRowOrDefault(short key1, long key2)
    {
        var table = DataTableManager.GetDataTableInternal<DTMatrixSample>();
        if (table != null)
        {
            var result = table.Get(key1, key2);
            return result != null ? result : table.DefaultValue;
        }
        return default(bool);
    }

    #endregion

    #region MatrixDataRow Support

    /// <summary>
    /// 创建数据行实例
    /// </summary>
    protected override MatrixDataRowBase<short, long, bool> CreateDataRowInstance()
    {
        return new DRMatrixSample();
    }

    #endregion
}

/// <summary>
/// MatrixSample 的数据行类 - 包含RowKey、ColumnKey和Value
/// </summary>
public sealed class DRMatrixSample : MatrixDataRowBase<short, long, bool>
{
    /// <summary>
    /// 构造函数
    /// </summary>
    public DRMatrixSample() : base()
    {
    }

    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="rowKey">行键</param>
    /// <param name="columnKey">列键</param>
    /// <param name="value">值</param>
    public DRMatrixSample(short rowKey, long columnKey, bool value) 
        : base(rowKey, columnKey, value)
    {
    }

    /// <summary>
    /// 从二进制读取器反序列化
    /// </summary>
    public override bool Deserialize(BinaryReader reader)
    {
        short rowKey;
        rowKey = reader.ReadInt16();

        long columnKey;
        columnKey = reader.Read7BitEncodedInt64();

        bool value;
        value = reader.ReadBoolean();

        SetData(rowKey, columnKey, value);
        return true;
    }
}

}
