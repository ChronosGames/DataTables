// <auto-generated />
#pragma warning disable CS0105

using System;
using System.Collections.Generic;
using DataTables;

#nullable enable

namespace ConsoleApp
{
public static class DataTableManagerExtension
{
    public static readonly Dictionary<string, string[]> Tables = new Dictionary<string, string[]>
    {
        { "ConsoleApp.DTDataTableSample", Array.Empty<string>() },
        { "ConsoleApp.DTDataTableSplitSample", new string[] {"x001", "x002"} },
        { "ConsoleApp.DTMatrixSample", Array.Empty<string>() },
    };

    public static readonly Dictionary<string, Priority> Priorities = new Dictionary<string, Priority>
    {
        { "ConsoleApp.DTDataTableSample", Priority.Normal },
        { "ConsoleApp.DTDataTableSplitSample", Priority.Normal },
        { "ConsoleApp.DTMatrixSample", Priority.Normal },
    };

    /// <summary>
    /// 预加载所有数据表。
    /// </summary>
    /// <param name="onCompleted">全部数据表预加载完成时回调。</param>
    /// <param name="onProgress">单步加载完成时回调。</param>
    public static void Preload(Action? onCompleted = default, Action<float>? onProgress = default)
    {
        const int total = 4;
        int done = 0;

        void next()
        {
            done++;
            onProgress?.Invoke((float)done / total);
            if (done == total)
            {
                onCompleted?.Invoke();
            }
        };

        DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSample>(next);
        DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSplitSample>("x001", next);
        DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSplitSample>("x002", next);
        DataTableManager.CreateDataTable<ConsoleApp.DTMatrixSample>(next);
    }

    /// <summary>
    /// 按优先级预加载数据表
    /// </summary>
    public static void PreloadByPriority(Priority priorities, Action? onCompleted = default, Action<float>? onProgress = default)
    {
        var selected = new List<Action<Action>>();
        if (Priorities.ContainsKey("ConsoleApp.DTDataTableSample") && (priorities & Priorities["ConsoleApp.DTDataTableSample"]) != 0)
        {
            selected.Add(next => DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSample>(next));
        }
        if (Priorities.ContainsKey("ConsoleApp.DTDataTableSplitSample") && (priorities & Priorities["ConsoleApp.DTDataTableSplitSample"]) != 0)
        {
            selected.Add(next => DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSplitSample>("x001", next));
            selected.Add(next => DataTableManager.CreateDataTable<ConsoleApp.DTDataTableSplitSample>("x002", next));
        }
        if (Priorities.ContainsKey("ConsoleApp.DTMatrixSample") && (priorities & Priorities["ConsoleApp.DTMatrixSample"]) != 0)
        {
            selected.Add(next => DataTableManager.CreateDataTable<ConsoleApp.DTMatrixSample>(next));
        }

        int total = selected.Count;
        if (total == 0)
        {
            onCompleted?.Invoke();
            return;
        }

        int done = 0;
        void next()
        {
            done++;
            onProgress?.Invoke((float)done / total);
            if (done == total)
            {
                onCompleted?.Invoke();
            }
        }

        foreach (var action in selected)
        {
            action(next);
        }
    }
}
}
