// <auto-generated />
#pragma warning disable CS0105
using ConsoleApp.Tables;
using ConsoleApp;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Buffers;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq.Expressions;
using System.Linq;
using System.Reflection;
using System.Text;
using System;
using ConsoleApp.Tables;

namespace ConsoleApp
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public EnumKeyTableTable EnumKeyTableTable { get; private set; }
        public ItemTable ItemTable { get; private set; }
        public MonsterTable MonsterTable { get; private set; }
        public PersonTable PersonTable { get; private set; }
        public QuestTable QuestTable { get; private set; }
        public Test1Table Test1Table { get; private set; }
        public Test2Table Test2Table { get; private set; }

        public MemoryDatabase(
            EnumKeyTableTable EnumKeyTableTable,
            ItemTable ItemTable,
            MonsterTable MonsterTable,
            PersonTable PersonTable,
            QuestTable QuestTable,
            Test1Table Test1Table,
            Test2Table Test2Table
        )
        {
            this.EnumKeyTableTable = EnumKeyTableTable;
            this.ItemTable = ItemTable;
            this.MonsterTable = MonsterTable;
            this.PersonTable = PersonTable;
            this.QuestTable = QuestTable;
            this.Test1Table = Test1Table;
            this.Test2Table = Test2Table;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.EnumKeyTableTable = ExtractTableData<EnumKeyTable, EnumKeyTableTable>(header, databaseBinary, options, xs => new EnumKeyTableTable(xs));
            this.ItemTable = ExtractTableData<Item, ItemTable>(header, databaseBinary, options, xs => new ItemTable(xs));
            this.MonsterTable = ExtractTableData<Monster, MonsterTable>(header, databaseBinary, options, xs => new MonsterTable(xs));
            this.PersonTable = ExtractTableData<Person, PersonTable>(header, databaseBinary, options, xs => new PersonTable(xs));
            this.QuestTable = ExtractTableData<Quest, QuestTable>(header, databaseBinary, options, xs => new QuestTable(xs));
            this.Test1Table = ExtractTableData<Test1, Test1Table>(header, databaseBinary, options, xs => new Test1Table(xs));
            this.Test2Table = ExtractTableData<Test2, Test2Table>(header, databaseBinary, options, xs => new Test2Table(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.EnumKeyTableTable = ExtractTableData<EnumKeyTable, EnumKeyTableTable>(header, databaseBinary, options, xs => new EnumKeyTableTable(xs)),
                () => this.ItemTable = ExtractTableData<Item, ItemTable>(header, databaseBinary, options, xs => new ItemTable(xs)),
                () => this.MonsterTable = ExtractTableData<Monster, MonsterTable>(header, databaseBinary, options, xs => new MonsterTable(xs)),
                () => this.PersonTable = ExtractTableData<Person, PersonTable>(header, databaseBinary, options, xs => new PersonTable(xs)),
                () => this.QuestTable = ExtractTableData<Quest, QuestTable>(header, databaseBinary, options, xs => new QuestTable(xs)),
                () => this.Test1Table = ExtractTableData<Test1, Test1Table>(header, databaseBinary, options, xs => new Test1Table(xs)),
                () => this.Test2Table = ExtractTableData<Test2, Test2Table>(header, databaseBinary, options, xs => new Test2Table(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.EnumKeyTableTable.GetRawDataUnsafe());
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.MonsterTable.GetRawDataUnsafe());
            builder.Append(this.PersonTable.GetRawDataUnsafe());
            builder.Append(this.QuestTable.GetRawDataUnsafe());
            builder.Append(this.Test1Table.GetRawDataUnsafe());
            builder.Append(this.Test2Table.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.EnumKeyTableTable.GetRawDataUnsafe());
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.MonsterTable.GetRawDataUnsafe());
            builder.Append(this.PersonTable.GetRawDataUnsafe());
            builder.Append(this.QuestTable.GetRawDataUnsafe());
            builder.Append(this.Test1Table.GetRawDataUnsafe());
            builder.Append(this.Test2Table.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                EnumKeyTableTable,
                ItemTable,
                MonsterTable,
                PersonTable,
                QuestTable,
                Test1Table,
                Test2Table,
            });

            ((ITableUniqueValidate)EnumKeyTableTable).ValidateUnique(result);
            ValidateTable(EnumKeyTableTable.All, database, "Gender", EnumKeyTableTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemTable).ValidateUnique(result);
            ValidateTable(ItemTable.All, database, "ItemId", ItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MonsterTable).ValidateUnique(result);
            ValidateTable(MonsterTable.All, database, "MonsterId", MonsterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)PersonTable).ValidateUnique(result);
            ValidateTable(PersonTable.All, database, "PersonId", PersonTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QuestTable).ValidateUnique(result);
            ValidateTable(QuestTable.All, database, "Id", QuestTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)Test1Table).ValidateUnique(result);
            ValidateTable(Test1Table.All, database, "Id", Test1Table.PrimaryKeySelector, result);
            ((ITableUniqueValidate)Test2Table).ValidateUnique(result);
            ValidateTable(Test2Table.All, database, "Id", Test2Table.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "enumkeytable":
                    return db.EnumKeyTableTable;
                case "item":
                    return db.ItemTable;
                case "monster":
                    return db.MonsterTable;
                case "person":
                    return db.PersonTable;
                case "quest_master":
                    return db.QuestTable;
                case "Test1":
                    return db.Test1Table;
                case "Test2":
                    return db.Test2Table;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("enumkeytable", ConsoleApp.Tables.EnumKeyTableTable.CreateMetaTable());
            dict.Add("item", ConsoleApp.Tables.ItemTable.CreateMetaTable());
            dict.Add("monster", ConsoleApp.Tables.MonsterTable.CreateMetaTable());
            dict.Add("person", ConsoleApp.Tables.PersonTable.CreateMetaTable());
            dict.Add("quest_master", ConsoleApp.Tables.QuestTable.CreateMetaTable());
            dict.Add("Test1", ConsoleApp.Tables.Test1Table.CreateMetaTable());
            dict.Add("Test2", ConsoleApp.Tables.Test2Table.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}