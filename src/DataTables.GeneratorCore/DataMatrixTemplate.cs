// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DataTables.GeneratorCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class DataMatrixTemplate : DataMatrixTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated />\r\n#pragma warning disable CS0105\r\n#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.\r\n#pragma warning disable CS8602 // Dereference of a possibly null reference.\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.CompilerServices;\r\nusing DataTables;\r\n\r\n#nullable enable\r\n\r\n");
 if (!string.IsNullOrEmpty(GenerationContext.Namespace)) { 
            this.Write("namespace ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
 } 
            this.Write("\r\npublic sealed partial class DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(" : DataMatrixBase<");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(">\r\n{\r\n    ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(GenerationContext.MatrixDefaultValue) ? string.Empty : "protected override " + BuildTypeString(kValue) + " DefaultValue => " + BuildTypeValueString(kValue, GenerationContext.MatrixDefaultValue) + ";" + Environment.NewLine));
            
            #line default
            #line hidden
            this.Write("\r\n    public DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write("(string name, int capacity) : base(name, capacity)\r\n    { }\r\n\r\n    public override bool ParseDataRow(int index, BinaryReader reader)\r\n    {\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kKey1));
            
            #line default
            #line hidden
            this.Write(";\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kKey1)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kKey2));
            
            #line default
            #line hidden
            this.Write(";\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kKey2)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kValue));
            
            #line default
            #line hidden
            this.Write(";\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kValue)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        SetDataRow(index, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kKey1));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kKey2));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(kValue));
            
            #line default
            #line hidden
            this.Write(");\r\n        return true;\r\n    }\r\n\r\n    #region Instance API\r\n\r\n    /// <summary>\r\n    /// 根据Key1和Key2获取数据值 (实例方法)\r\n    /// </summary>\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write("? GetDataRow(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" key1, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" key2)\r\n    {\r\n        return Get(key1, key2);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 根据Key1和Key2获取数据值，如果不存在则返回默认值 (实例方法)\r\n    /// </summary>\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(" GetDataRowOrDefault(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" key1, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" key2)\r\n    {\r\n        var result = Get(key1, key2);\r\n        return result != null ? result : DefaultValue;\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region Static API\r\n\r\n    /// <summary>\r\n    /// 获取数据矩阵实例 - 便于访问基类方法 (静态方法)\r\n    /// </summary>\r\n    public static DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(" Table\r\n    {\r\n        get\r\n        {\r\n            var table = DataTableManager.GetDataTableInternal<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">();\r\n            if (table == null)\r\n            {\r\n                throw new InvalidOperationException(\"DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(" not loaded. Call DataTableManager.CreateDataTable<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">() first.\");\r\n            }\r\n            return table;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 安全获取数据矩阵实例 - 返回null如果未加载 (静态方法)\r\n    /// </summary>\r\n    public static DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write("? TableOrNull => DataTableManager.GetDataTableInternal<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">();\r\n\r\n    /// <summary>\r\n    /// 检查数据矩阵是否已加载 (静态方法)\r\n    /// </summary>\r\n    public static bool IsLoaded => DataTableManager.IsLoaded<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">();\r\n\r\n    /// <summary>\r\n    /// 根据Key1和Key2获取数据值 (静态方法)\r\n    /// </summary>\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write("? GetRow(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" key1, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" key2)\r\n    {\r\n        var table = DataTableManager.GetDataTableInternal<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">();\r\n        return table?.Get(key1, key2);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 根据Key1和Key2获取数据值，如果不存在则返回默认值 (静态方法)\r\n    /// </summary>\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(" GetRowOrDefault(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" key1, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" key2)\r\n    {\r\n        var table = DataTableManager.GetDataTableInternal<DT");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(">();\r\n        if (table != null)\r\n        {\r\n            var result = table.Get(key1, key2);\r\n            return result != null ? result : table.DefaultValue;\r\n        }\r\n        return default(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(");\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region MatrixDataRow Support\r\n\r\n    /// <summary>\r\n    /// 创建数据行实例\r\n    /// </summary>\r\n    protected override MatrixDataRowBase<");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write("> CreateDataRowInstance()\r\n    {\r\n        return new DR");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write("();\r\n    }\r\n\r\n    #endregion\r\n}\r\n\r\n/// <summary>\r\n/// ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(" 的数据行类 - 包含RowKey、ColumnKey和Value\r\n/// </summary>\r\npublic sealed class DR");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write(" : MatrixDataRowBase<");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(">\r\n{\r\n    /// <summary>\r\n    /// 构造函数\r\n    /// </summary>\r\n    public DR");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write("() : base()\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// 构造函数\r\n    /// </summary>\r\n    /// <param name=\"rowKey\">行键</param>\r\n    /// <param name=\"columnKey\">列键</param>\r\n    /// <param name=\"value\">值</param>\r\n    public DR");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" rowKey, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" columnKey, ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(" value) \r\n        : base(rowKey, columnKey, value)\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// 从二进制读取器反序列化\r\n    /// </summary>\r\n    public override bool Deserialize(BinaryReader reader)\r\n    {\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey1)));
            
            #line default
            #line hidden
            this.Write(" rowKey;\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kKey1).Replace(kKey1, "rowKey")));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kKey2)));
            
            #line default
            #line hidden
            this.Write(" columnKey;\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kKey2).Replace(kKey2, "columnKey")));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildTypeString(kValue)));
            
            #line default
            #line hidden
            this.Write(" value;\r\n        ");
            
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildDeserializeMethodString(kValue).Replace(kValue, "value")));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        SetData(rowKey, columnKey, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n");
 if (!string.IsNullOrEmpty(GenerationContext.Namespace)) { 
            this.Write("}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class DataMatrixTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
