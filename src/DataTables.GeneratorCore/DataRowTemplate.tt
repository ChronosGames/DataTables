<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
using System;
using System.IO;
using System.Collections.Generic;
using DataTables;
<#= Using #>

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
{
<# } #>
    public sealed partial class DT<#= GenerationContext.ClassName #> : DataTable<<#= GenerationContext.RealClassName #>>
    {
<#
    for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>
        private <#= GenerationContext.BuildIndexDictDefine(item) #> m_Dict<#= i + 1 #> = new <#= GenerationContext.BuildIndexDictDefine(item) #>();
<#  }
    for (var j = 0; j < GenerationContext.Groups.Count; j++)
    {
        var fieldNames = GenerationContext.Groups[j];
#>
        private <#= GenerationContext.BuildGroupDictDefine(fieldNames) #> m_Dict<#= GenerationContext.Indexs.Count + 1 + j #> = new <#= GenerationContext.BuildGroupDictDefine(fieldNames) #>();
<#  }
    for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>
        public <#= GenerationContext.RealClassName #> GetDataRowBy<#= string.Join("And", item) #>(<#= GenerationContext.BuildMethodParameters(item) #>)
        {
            if (m_Dict<#= i + 1 #>.TryGetValue(<#= string.Join(", ", item) #>, out var result))
            {
                return result;
            }
            else
            {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
                UnityEngine.Debug.LogWarningFormat("DT<#= GenerationContext.ClassName #> not found index: <#= GenerationContext.BuildIndexsLogFormat(item) #>", <#= string.Join(", ", item) #>);
#endif
                return null;
            }
        }
<#  }
    for (var j = 0; j < GenerationContext.Groups.Count; j++)
    {
        var item = GenerationContext.Groups[j];
#>
        public List<<#= GenerationContext.RealClassName #>> GetDataRowsGroupBy<#= string.Join("And", item) #>(<#= GenerationContext.BuildMethodParameters(item) #>)
        {
            return m_Dict<#= GenerationContext.Indexs.Count + j + 1 #>.TryGetValue(<#= string.Join(", ", item) #>, out var result) ? result : null;
        }
<#  } #>

        protected override void InternalAddDataRow(int index, <#= GenerationContext.RealClassName #> dataRow)
        {
            base.InternalAddDataRow(index, dataRow);

<#  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>
            m_Dict<#= i+1 #>.Add(dataRow.<#= string.Join(", dataRow.", item) #>, dataRow);
<#  }
    for (var i = 0; i < GenerationContext.Groups.Count; i++)
    {
        var item = GenerationContext.Groups[i];
#>
            {
                if (m_Dict<#= GenerationContext.Indexs.Count + i + 1 #>.TryGetValue(dataRow.<#= string.Join(", dataRow.", item) #>, out var arr))
                {
                    arr.Add(dataRow);
                }
                else
                {
                    arr = new List<<#= GenerationContext.RealClassName #>>();
                    arr.Add(dataRow);
                    m_Dict<#= GenerationContext.Indexs.Count + i + 1 #>.Add(dataRow.<#= string.Join(", dataRow.", item) #>, arr);
                }
            }
<#  } #>
        }
    }

    /// <summary><#= GenerationContext.Title #></summary>
    public sealed partial class <#= GenerationContext.RealClassName #> : DataRowBase
    {
<# foreach(var item in GenerationContext.Properties) { #>
        /// <summary><#= item.Comment #></summary>
        public <#= GetPropertyTypeString(item) #> <#= item.Name #> { get; private set; }
<# } #>

        public override bool Deserialize(BinaryReader reader)
        {
<# foreach(var item in GenerationContext.Properties) { #>
            <#= GetDeserializeMethodString(item) #>
<# } #>
            return true;
        }
    }
    
<# if (!string.IsNullOrEmpty(Namespace)) { #>
}
<# } #>