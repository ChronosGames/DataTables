<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>
using System;
using System.IO;
using System.Collections.Generic;
using DataTables;

namespace <#= Namespace #>
{
    public sealed class DT<#= GenerationContext.ClassName #> : DataTable<<#= GenerationContext.RealClassName #>>
    {
<#
        for (var i = 0; i < GenerationContext.Indexs.Count; i++)
        {
            var item = GenerationContext.Indexs[i];
#>
        private <#= GenerationContext.GetIndexDictDefine(item) #> m_Dict<#= i + 1 #> = new <#= GenerationContext.GetIndexDictDefine(item) #>();
<#      }
        for (var i = 0; i < GenerationContext.Indexs.Count; i++)
        {
            var item = GenerationContext.Indexs[i];
#>
        public <#= GenerationContext.RealClassName #> GetDataRow(<#= GenerationContext.GetIndexsMethodDefine(item) #>)
        {
            return m_Dict<#= i + 1 #>.TryGetValue(<#= string.Join(", ", item) #>, out var result) ? result : null;
        }
<# } #>
        protected override void InternalAddDataRow(<#= GenerationContext.RealClassName #> dataRow)
        {
            base.InternalAddDataRow(dataRow);
<#  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>
            m_Dict<#= i+1 #>.Add(dataRow.<#= string.Join(", dataRow.", item) #>, dataRow);
<#  } #>
        }
    }

    /// <summary><#= GenerationContext.Title #></summary>
    public sealed class <#= GenerationContext.RealClassName #> : DataRowBase
    {
<# foreach(var item in GenerationContext.Properties) { #>
        /// <summary><#= item.Comment #></summary>
        public <#= GetPropertyTypeString(item) #> <#= item.Name #> { get; private set; }
<# } #>

        public override bool Deserialize(BinaryReader reader)
        {
<# foreach(var item in GenerationContext.Properties) { #>
                    <#= GetDeserializeMethodString(item) #>
<# } #>
            return true;
        }
    }
}