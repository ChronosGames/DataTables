<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105

using System;
using System.Collections.Generic;
using DataTables;

#nullable enable

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
{
<# } #>
public static class DataTableManagerExtension
{
    public static readonly Dictionary<string, string[]> Tables = new Dictionary<string, string[]>
    {
<# foreach (var pair in DataTables)
{
    #>        { "<#= pair.Key #>", <#=(!pair.Value.Any() ? "Array.Empty<string>()" : "new string[] {\"" + string.Join("\", \"", pair.Value) + "\"}")#> },<#=Environment.NewLine#><#
} #>
    };

    public static readonly Dictionary<string, Priority> Priorities = new Dictionary<string, Priority>
    {
<# if (TablePriorities != null) {
   foreach (var kv in TablePriorities.OrderBy(k=>k.Key)) { #>
        { "<#= kv.Key #>", Priority.<#= kv.Value #> },<#=Environment.NewLine#><#
   }
} #>
    };

    /// <summary>
    /// 预加载所有数据表。
    /// </summary>
    /// <param name="onCompleted">全部数据表预加载完成时回调。</param>
    /// <param name="onProgress">单步加载完成时回调。</param>
    public static void Preload(Action? onCompleted = default, Action<float>? onProgress = default)
    {
        const int total = <#=DataTables.Sum(pair => pair.Value.Any() ? pair.Value.Count() : 1)#>;
        int done = 0;

        void next()
        {
            done++;
            onProgress?.Invoke((float)done / total);
            if (done == total)
            {
                onCompleted?.Invoke();
            }
        };

<#
foreach (var pair in DataTables)
{
    if (!pair.Value.Any())
    {
        #>        DataTableManager.CreateDataTable<<#=pair.Key#>>(next);<#=Environment.NewLine#><#
    }
    else
    {
        foreach (var name in pair.Value)
        {
            #>        DataTableManager.CreateDataTable<<#=pair.Key#>>("<#=name#>", next);<#=Environment.NewLine#><#
        }
    }
}
#>
    }

    /// <summary>
    /// 按优先级预加载数据表
    /// </summary>
    public static void PreloadByPriority(Priority priorities, Action? onCompleted = default, Action<float>? onProgress = default)
    {
        var selected = new List<Action<Action>>();
<# foreach (var pair in DataTables) { #>
        if (Priorities.ContainsKey("<#= pair.Key #>") && (priorities & Priorities["<#= pair.Key #>"]) != 0)
        {
<# if (!pair.Value.Any()) { #>
            selected.Add(next => DataTableManager.CreateDataTable<<#=pair.Key#>>(next));
<# } else { foreach (var name in pair.Value) { #>
            selected.Add(next => DataTableManager.CreateDataTable<<#=pair.Key#>>("<#=name#>", next));
<# } } #>
        }
<# } #>

        int total = selected.Count;
        if (total == 0)
        {
            onCompleted?.Invoke();
            return;
        }

        int done = 0;
        void next()
        {
            done++;
            onProgress?.Invoke((float)done / total);
            if (done == total)
            {
                onCompleted?.Invoke();
            }
        }

        foreach (var action in selected)
        {
            action(next);
        }
    }
}
<# if (!string.IsNullOrEmpty(Namespace)) { #>
}
<# } #>
