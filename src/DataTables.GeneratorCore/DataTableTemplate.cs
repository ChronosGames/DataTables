// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 17.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DataTables.GeneratorCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DataTableTemplate : DataTableTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated />\r\n#pragma warning disable CS0105\r\nusing System;\r\nusing Syste" +
                    "m.IO;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.CompilerServices;" +
                    "\r\nusing DataTables;\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Using));
            this.Write("\r\n\r\n");
 if (!string.IsNullOrEmpty(Namespace)) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n");
 } 
            this.Write("public sealed partial class DT");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(" : DataTable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write(">\r\n{\r\n");

    if (GenerationContext.Indexs.Count > 0)
    {
        for (var i = 0; i < GenerationContext.Indexs.Count; i++)
        {
            var item = GenerationContext.Indexs[i];
            
            this.Write("    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildIndexDictDefine(item)));
            this.Write(" m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(i + 1));
            this.Write(" = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildIndexDictDefine(item)));
            this.Write("();");
            this.Write(this.ToStringHelper.ToStringWithCulture(Environment.NewLine));

        }

        
            this.Write(this.ToStringHelper.ToStringWithCulture(Environment.NewLine));

    }

    if (GenerationContext.Groups.Count > 0)
    {
        for (var j = 0; j < GenerationContext.Groups.Count; j++)
        {
            var fieldNames = GenerationContext.Groups[j];

            
            this.Write("    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildGroupDictDefine(fieldNames)));
            this.Write(" m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.Indexs.Count + 1 + j));
            this.Write(" = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildGroupDictDefine(fieldNames)));
            this.Write("();");
            this.Write(this.ToStringHelper.ToStringWithCulture(Environment.NewLine));

        }

        
            this.Write(this.ToStringHelper.ToStringWithCulture(Environment.NewLine));

    }

            this.Write("    public DT");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("(string name, int capicity) : base(name, capicity) { }\r\n");
  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];

            this.Write("\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write(" GetDataRowBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join("And", item)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildMethodParameters(item)));
            this.Write(")\r\n    {\r\n        if (m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(i + 1));
            this.Write(".TryGetValue(");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", item)));
            this.Write(", out var result))\r\n        {\r\n            return result;\r\n        }\r\n        els" +
                    "e\r\n        {\r\n#if DT_CHECK_NOT_FOUND && UNITY_EDITOR\r\n            UnityEngine.De" +
                    "bug.LogWarningFormat(\"DT");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(" not found index: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildIndexsLogFormat(item)));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", item)));
            this.Write(");\r\n#endif\r\n            return null;\r\n        }\r\n    }\r\n");
  }
    for (var j = 0; j < GenerationContext.Groups.Count; j++)
    {
        var item = GenerationContext.Groups[j];

            this.Write("\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public List<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write("> GetDataRowsGroupBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join("And", item)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BuildMethodParameters(item)));
            this.Write(")\r\n    {\r\n        return m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.Indexs.Count + j + 1));
            this.Write(".TryGetValue(");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", item)));
            this.Write(", out var result) ? result : null;\r\n    }\r\n");
  } 
            this.Write("\r\n    protected override void InternalAddDataRow(int index, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write(" dataRow)\r\n    {\r\n        base.InternalAddDataRow(index, dataRow);\r\n\r\n");
  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];

            this.Write("        m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            this.Write(".Add(dataRow.");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", dataRow.", item)));
            this.Write(", dataRow);\r\n");
  }
    for (var i = 0; i < GenerationContext.Groups.Count; i++)
    {
        var item = GenerationContext.Groups[i];

            this.Write("        {\r\n            if (m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.Indexs.Count + i + 1));
            this.Write(".TryGetValue(dataRow.");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", dataRow.", item)));
            this.Write(", out var arr))\r\n            {\r\n                arr.Add(dataRow);\r\n            }\r" +
                    "\n            else\r\n            {\r\n                arr = new List<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write(">();\r\n                arr.Add(dataRow);\r\n                m_Dict");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.Indexs.Count + i + 1));
            this.Write(".Add(dataRow.");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", dataRow.", item)));
            this.Write(", arr);\r\n            }\r\n        }\r\n");
  } 
            this.Write("    }\r\n}\r\n\r\n/// <summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildSummary(GenerationContext.Title)));
            this.Write("</summary>\r\npublic sealed partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.DataRowClassName));
            this.Write(" : DataRowBase\r\n{\r\n");
 foreach(var item in GenerationContext.Fields)
{
    if (item.IsIgnore) continue;

            this.Write("\r\n    /// <summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(BuildSummary(item.Title)));
            this.Write("</summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(item.Note) ? string.Empty : Environment.NewLine + "    /// <remarks>" + BuildSummary(item.Note) + "</remarks>"));
            this.Write("\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPropertyTypeString(item)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write(" { get; private set; }\r\n");
 } 
            this.Write("\r\n    public override bool Deserialize(BinaryReader reader)\r\n    {\r\n");
 foreach(var item in GenerationContext.Fields)
{
    if (item.IsIgnore) continue;

            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetDeserializeMethodString(item)));
            this.Write("\r\n");
 } 
            this.Write("        return true;\r\n    }\r\n}\r\n    \r\n");
 if (!string.IsNullOrEmpty(Namespace)) { 
            this.Write("}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DataTableTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
