<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
#pragma warning disable CS8602 // Dereference of a possibly null reference.

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using DataTables;
<#= Using #>

#nullable enable

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
{
<# } #>
public sealed partial class <#= GenerationContext.DataTableClassName #> : DataTable<<#= GenerationContext.DataRowClassName #>>
{
<#
    if (GenerationContext.Indexs.Count > 0)
    {
        for (var i = 0; i < GenerationContext.Indexs.Count; i++)
        {
            var item = GenerationContext.Indexs[i];
            #>    private <#= GenerationContext.BuildIndexDictDefine(item) #> m_Dict<#= i + 1 #> = new <#= GenerationContext.BuildIndexDictDefine(item) #>();<#=Environment.NewLine#><#
        }

        #><#=Environment.NewLine#><#
    }

    if (GenerationContext.Groups.Count > 0)
    {
        for (var j = 0; j < GenerationContext.Groups.Count; j++)
        {
            var fieldNames = GenerationContext.Groups[j];

            #>    private <#= GenerationContext.BuildGroupDictDefine(fieldNames) #> m_Dict<#= GenerationContext.Indexs.Count + 1 + j #> = new <#= GenerationContext.BuildGroupDictDefine(fieldNames) #>();<#=Environment.NewLine#><#
        }

        #><#=Environment.NewLine#><#
    }
#>
    public <#= GenerationContext.DataTableClassName #>(string name, int capacity) : base(name, capacity) { }

    protected override void InternalAddDataRow(int index, <#= GenerationContext.DataRowClassName #> dataRow)
    {
        base.InternalAddDataRow(index, dataRow);

<#  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>
        m_Dict<#= i+1 #>.Add(<#= item.Length > 1 ? ('(' + (string.Join(", ", item.Select(x => $"dataRow.{x}"))) + ')') : $"dataRow.{item[0]}" #>, dataRow);
<#  }
    for (var i = 0; i < GenerationContext.Groups.Count; i++)
    {
        var item = GenerationContext.Groups[i];
#>
        {
            if (m_Dict<#= GenerationContext.Indexs.Count + i + 1 #>.TryGetValue(<#= item.Length > 1 ? '(' + (string.Join(", ", item.Select(x => $"dataRow.{x}"))) + ')' : $"dataRow.{item[0]}" #>, out var arr))
            {
                arr.Add(dataRow);
            }
            else
            {
                arr = new List<<#= GenerationContext.DataRowClassName #>>();
                arr.Add(dataRow);
                m_Dict<#= GenerationContext.Indexs.Count + i + 1 #>.Add(<#= item.Length > 1 ? '(' + (string.Join(", ", item.Select(x => $"dataRow.{x}"))) + ')' : $"dataRow.{item[0]}" #>, arr);
            }
        }
<#  } #>
    }

    #region Enhanced Static API

    /// <summary>
    /// 获取数据表实例 - 便于访问基类方法
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataTableClassName #> Table
    {
        get
        {
            var table = DataTableManager.GetDataTableInternal<<#= GenerationContext.DataTableClassName #>>();
            if (table == null)
            {
                throw new InvalidOperationException("<#= GenerationContext.DataTableClassName #> not loaded. Call DataTableManager.CreateDataTable<<#= GenerationContext.DataTableClassName #>>() first.");
            }
            return table;
        }
    }

    /// <summary>
    /// 安全获取数据表实例 - 返回null如果未加载
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataTableClassName #>? TableOrNull => DataTableManager.GetDataTableInternal<<#= GenerationContext.DataTableClassName #>>();

    /// <summary>
    /// 检查数据表是否已加载
    /// </summary>
    public static bool IsLoaded => DataTableManager.HasDataTable<<#= GenerationContext.DataTableClassName #>>();

    /// <summary>
    /// 获取数据表状态信息
    /// </summary>
    public static DataTableStatus Status
    {
        get
        {
            var table = TableOrNull;
            if (table == null) return DataTableStatus.NotLoaded;
            return table.Count > 0 ? DataTableStatus.LoadedWithData : DataTableStatus.LoadedEmpty;
        }
    }

    /// <summary>
    /// 静态版本：检查是否存在符合条件的数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool HasDataRow(Predicate<<#= GenerationContext.DataRowClassName #>> condition) => Table.HasDataRow(condition);

    /// <summary>
    /// 静态版本：获取符合条件的第一个数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataRowClassName #>? GetDataRow(Predicate<<#= GenerationContext.DataRowClassName #>> condition) => Table.GetDataRow(condition);

    /// <summary>
    /// 静态版本：获取符合条件的所有数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IEnumerable<<#= GenerationContext.DataRowClassName #>> GetDataRows(Predicate<<#= GenerationContext.DataRowClassName #>> condition) => Table.GetDataRows(condition);

    /// <summary>
    /// 静态版本：获取排序后的数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataRowClassName #>[] GetDataRows(Comparison<<#= GenerationContext.DataRowClassName #>> comparison) => Table.GetDataRows(comparison);

    /// <summary>
    /// 静态版本：获取所有数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataRowClassName #>[] GetAllDataRows() => Table.GetAllDataRows();

    /// <summary>
    /// 静态版本：数据行数量
    /// </summary>
    public static int Count => Table.Count;

    #endregion

    #region Static API
<#  for (var i = 0; i < GenerationContext.Indexs.Count; i++)
    {
        var item = GenerationContext.Indexs[i];
#>

    /// <summary>
    /// 根据索引获取数据行
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GenerationContext.DataRowClassName #>? GetDataRowBy<#= string.Join("And", item) #>(<#= GenerationContext.BuildMethodParameters(item) #>)
    {
        var table = DataTableManager.GetDataTableInternal<<#= GenerationContext.DataTableClassName #>>();
        if (table?.m_Dict<#= i + 1 #>.TryGetValue(<#= item.Length > 1 ? '(' + GenerationContext.BuildCamelCaseParameters(item) + ')' : GenerationContext.ToCamelCase(item[0]) #>, out var result) == true)
        {
            return result;
        }
        else
        {
#if DT_CHECK_NOT_FOUND && UNITY_EDITOR
            UnityEngine.Debug.LogWarningFormat("<#= GenerationContext.DataTableClassName #> not found index: <#= GenerationContext.BuildIndexsLogFormat(item) #>", <#= GenerationContext.BuildCamelCaseParameters(item) #>);
#endif
            return null;
        }
    }
<#  }
    for (var j = 0; j < GenerationContext.Groups.Count; j++)
    {
        var item = GenerationContext.Groups[j];
#>

    /// <summary>
    /// 根据分组获取数据行列表
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static List<<#= GenerationContext.DataRowClassName #>>? GetDataRowsGroupBy<#= string.Join("And", item) #>(<#= GenerationContext.BuildMethodParameters(item) #>)
    {
        var table = DataTableManager.GetDataTableInternal<<#= GenerationContext.DataTableClassName #>>();
        return table?.m_Dict<#= GenerationContext.Indexs.Count + j + 1 #>.TryGetValue(<#= item.Length > 1 ? '(' + GenerationContext.BuildCamelCaseParameters(item) + ')' : GenerationContext.ToCamelCase(item[0]) #>, out var result) == true ? result : null;
    }
<#  } #>

    #endregion
}

/// <summary><#= BuildSummary(GenerationContext.Title) #></summary>
public sealed partial class <#= GenerationContext.DataRowClassName #> : DataRowBase
{
<# foreach(var item in GenerationContext.Fields)
{
    if (item.IsIgnore) continue;
#>

    /// <summary><#= BuildSummary(item.Title) #></summary><#= string.IsNullOrEmpty(item.Note) ? string.Empty : Environment.NewLine + "    /// <remarks>" + BuildSummary(item.Note) + "</remarks>" #>
    public <#= GetPropertyTypeString(item) #> <#= item.Name #> { get; private set; }
<# } #>

    public override bool Deserialize(BinaryReader reader)
    {
<# foreach(var item in GenerationContext.Fields)
{
    if (item.IsIgnore) continue;
#>
        <#= GetDeserializeMethodString(item) #>
<# } #>
        return true;
    }
}

<# if (!string.IsNullOrEmpty(Namespace)) { #>
}
<# } #>
