// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DataTables.GeneratorCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class MemoryDatabaseTemplate : MemoryDatabaseTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n// <auto-generated />\n#pragma warning disable CS0105\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Using));
            this.Write("\n\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\n{\n   public sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write(" : MemoryDatabaseBase\n   {\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table { get; private set; }\n");
 } 
            this.Write("\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write("(\n");
 for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; 
            this.Write("\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table");
            this.Write(this.ToStringHelper.ToStringWithCulture((i == GenerationContexts.Length - 1) ? "" : ","));
            this.Write("\n");
 } 
            this.Write("\n        )\n        {\n");
 for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; 
            this.Write("\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table;\n");
 } 
            this.Write("\n        }\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write(@"(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
");
 foreach(var item in GenerationContexts) { 
            this.Write("\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table = ExtractTableData<");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table>(header, databaseBinary, options, xs => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table(xs));\n");
 } 
            this.Write(@"
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
");
 foreach(var item in GenerationContexts) { 
            this.Write("\n                () => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table = ExtractTableData<");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table>(header, databaseBinary, options, xs => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table(xs)),\n");
 } 
            this.Write("\n            };\n            \n            System.Threading.Tasks.Parallel.Invoke(n" +
                    "ew System.Threading.Tasks.ParallelOptions\n            {\n                MaxDegre" +
                    "eOfParallelism = maxDegreeOfParallelism\n            }, extracts);\n        }\n\n   " +
                    "     public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("ImmutableBuilder ToImmutableBuilder()\n        {\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("ImmutableBuilder(this);\n        }\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("DatabaseBuilder ToDatabaseBuilder()\n        {\n            var builder = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("DatabaseBuilder();\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n            builder.Append(this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table.GetRawDataUnsafe());\n");
 } 
            this.Write("\n            return builder;\n        }\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)\n      " +
                    "  {\n            var builder = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixClassName));
            this.Write("DatabaseBuilder(resolver);\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n            builder.Append(this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table.GetRawDataUnsafe());\n");
 } 
            this.Write("\n            return builder;\n        }\n\n#if !DISABLE_MASTERMEMORY_VALIDATOR\n\n    " +
                    "    public ValidateResult Validate()\n        {\n            var result = new Vali" +
                    "dateResult();\n            var database = new ValidationDatabase(new object[]\n   " +
                    "         {\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table,\n");
 } 
            this.Write("\n            });\n\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n            ((ITableUniqueValidate)");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table).ValidateUnique(result);\n            ValidateTable(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table.All, database, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.PrimaryKey.BuildPropertyTupleName()));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table.PrimaryKeySelector, result);\n");
 } 
            this.Write("\n\n            return result;\n        }\n\n#endif\n\n        static MasterMemory.Meta." +
                    "MetaDatabase metaTable;\n\n        public static object GetTable(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write(" db, string tableName)\n        {\n            switch (tableName)\n            {\n");
 foreach(var item in GenerationContexts) { 
            this.Write("\n                case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.MemoryTableName));
            this.Write("\":\n                    return db.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table;\n");
 } 
            this.Write(@"                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
");
 foreach(var item in GenerationContexts) { 
            this.Write("\n            dict.Add(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.MemoryTableName));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Tables.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ClassName));
            this.Write("Table.CreateMetaTable());\n");
 } 
            this.Write("\n\n            metaTable = new MasterMemory.Meta.MetaDatabase(dict);\n            r" +
                    "eturn metaTable;\n        }\n\n#endif\n    }\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class MemoryDatabaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
