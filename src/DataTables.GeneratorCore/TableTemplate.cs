// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DataTables.GeneratorCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TableTemplate : TableTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n// <auto-generated />\n#pragma warning disable CS0105\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Using));
            this.Write("\n\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Tables\n{\n   public sealed partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("Table : TableBase<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(">, ITableUniqueValidate\n   {\n        public Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.BuildTypeName()));
            this.Write("> PrimaryKeySelector => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.SelectorName));
            this.Write(";\n        readonly Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.BuildTypeName()));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.SelectorName));
            this.Write(";\n\n");
 for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; 
            this.Write("\n        readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("[] ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(";\n        readonly Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(";\n");
 } 
            this.Write("\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("Table(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("[] sortedData)\n            : base(sortedData)\n        {\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.SelectorName));
            this.Write(" = x => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.PrimaryKey.BuildKeyAccessor("x")));
            this.Write(";\n");
 for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; 
            this.Write("\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(" = x => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildKeyAccessor("x")));
            this.Write(";\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(" = CloneAndSortBy(this.secondaryIndex");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.IndexNo));
            this.Write("Selector, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(");\n");
 } 
            this.Write("\n            OnAfterConstruct();\n        }\n\n        partial void OnAfterConstruct" +
                    "();\n\n");
 for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; 
            this.Write("\n        public RangeView<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("> SortBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write(" => new RangeView<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(">(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", 0, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(".Length - 1, true);\n");
 } 
            this.Write("\n\n");
 foreach(var item in new KeyBase[] { GenerationContext.PrimaryKey }.Concat(GenerationContext.SecondaryKeys)) { 
            this.Write("\n");
 if(item.CanInlineBinarySearch) { 
            this.Write("\n        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServi" +
                    "ces.MethodImplOptions.AggressiveInlining)]\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" FindBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key)\n        {\n            var lo = 0;\n            var hi = data.Length - 1;\n   " +
                    "         while (lo <= hi)\n            {\n                var mid = (int)(((uint)h" +
                    "i + (uint)lo) >> 1);\n                var selected = data[mid].");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Properties[0].Name));
            this.Write(";\n                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;\n " +
                    "               if (found == 0) { return data[mid]; }\n                if (found <" +
                    " 0) { lo = mid + 1; }\n                else { hi = mid - 1; }\n            }\n");
 if(ThrowKeyIfNotFound) { 
            this.Write("\n            return ThrowKeyNotFound(key);\n");
 } else { 
            this.Write("\n            return default;\n");
 } 
            this.Write("\n        }\n\n        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.Co" +
                    "mpilerServices.MethodImplOptions.AggressiveInlining)]\n        public bool TryFin" +
                    "dBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" result)\n        {\n            var lo = 0;\n            var hi = data.Length - 1;\n" +
                    "            while (lo <= hi)\n            {\n                var mid = (int)(((uin" +
                    "t)hi + (uint)lo) >> 1);\n                var selected = data[mid].");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Properties[0].Name));
            this.Write(@";
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { result = data[mid]; return true; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            result = default;
            return false;
        }
");
 } else { 
            this.Write("\n");
 if (!item.IsNonUnique) { 
            this.Write("\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" FindBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key)\n        {\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildFindPrefix()));
            this.Write("Core");
            this.Write(this.ToStringHelper.ToStringWithCulture(!item.IsNonUnique && item.IsIntType ? "Int" : ""));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(", key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ThrowKeyIfNotFound.ToString().ToLower()));
            this.Write(");\n        }\n        \n        public bool TryFindBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" result)\n        {\n            return Try");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildFindPrefix()));
            this.Write("Core");
            this.Write(this.ToStringHelper.ToStringWithCulture(!item.IsNonUnique && item.IsIntType ? "Int" : ""));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(", key, out result);\n        }\n");
 } else { 
            this.Write("\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" FindBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key)\n        {\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildFindPrefix()));
            this.Write("Core");
            this.Write(this.ToStringHelper.ToStringWithCulture(!item.IsNonUnique && item.IsIntType ? "Int" : ""));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(", key);\n        }\n");
 } 
            this.Write("\n");
 } 
            this.Write("\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildReturnTypeName(GenerationContext.ClassName)));
            this.Write(" FindClosestBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" key, bool selectLower = true)\n        {\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildFindPrefix()));
            this.Write("ClosestCore(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(", key, selectLower);\n        }\n\n        public RangeView<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("> FindRangeBy");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildMethodName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" min, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildTypeName()));
            this.Write(" max, bool ascendant = true)\n        {\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildFindPrefix()));
            this.Write("RangeCore(");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SelectorName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BuildComparer()));
            this.Write(", min, max, ascendant);\n        }\n\n");
 } 
            this.Write("\n\n        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)\n    " +
                    "    {\n#if !DISABLE_MASTERMEMORY_VALIDATOR\n\n");
 if (!GenerationContext.PrimaryKey.IsNonUnique) { var key = GenerationContext.PrimaryKey; 
            this.Write("\n            ValidateUniqueCore(");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.SelectorName));
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.BuildPropertyTupleName()));
            this.Write("\", resultSet);       \n");
 } 
            this.Write("\n");
 for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var key = GenerationContext.SecondaryKeys[i]; 
            this.Write("\n");
      if (!key.IsNonUnique) { 
            this.Write("\n            ValidateUniqueCore(");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.TableName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.SelectorName));
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.BuildPropertyTupleName()));
            this.Write("\", resultSet);       \n");
      } 
            this.Write("\n");
 } 
            this.Write("\n\n#endif\n        }\n\n#if !DISABLE_MASTERMEMORY_METADATABASE\n\n        public static" +
                    " MasterMemory.Meta.MetaTable CreateMetaTable()\n        {\n            return new " +
                    "MasterMemory.Meta.MetaTable(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("), typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write("Table), \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.MemoryTableName));
            this.Write("\",\n                new MasterMemory.Meta.MetaProperty[]\n                {\n");
 foreach(var prop in GenerationContext.Properties) { 
            this.Write("\n                    new MasterMemory.Meta.MetaProperty(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(").GetProperty(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            this.Write("\")),\n");
 } 
            this.Write("\n                },\n                new MasterMemory.Meta.MetaIndex[]{\n");
 foreach(var key in GenerationContext.Keys) { 
            this.Write("\n                    new MasterMemory.Meta.MetaIndex(new System.Reflection.Proper" +
                    "tyInfo[] {\n");
 foreach(var keyProp in key.Properties) { 
            this.Write("\n                        typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.ClassName));
            this.Write(").GetProperty(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(keyProp.Name));
            this.Write("\"),\n");
 } 
            this.Write("\n                    }, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.IsPrimary.ToString().ToLower()));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture((!key.IsNonUnique).ToString().ToLower()));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(key.BuildComparer()));
            this.Write("),\n");
 } 
            this.Write("\n                });\n        }\n\n#endif\n    }\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class TableTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
