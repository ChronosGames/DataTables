// <auto-generated />
using MasterMemory.Tests.TestStructures;
using MasterMemory.Tests;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using MasterMemory.Tests.Tables;

namespace MasterMemory.Tests
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public PersonModelTable PersonModelTable { get; private set; }
        public QuestMasterTable QuestMasterTable { get; private set; }
        public ItemMasterTable ItemMasterTable { get; private set; }
        public QuestMasterEmptyValidateTable QuestMasterEmptyValidateTable { get; private set; }
        public ItemMasterEmptyValidateTable ItemMasterEmptyValidateTable { get; private set; }
        public SequentialCheckMasterTable SequentialCheckMasterTable { get; private set; }
        public SingleMasterTable SingleMasterTable { get; private set; }
        public FailTable FailTable { get; private set; }
        public SampleTable SampleTable { get; private set; }
        public SkillMasterTable SkillMasterTable { get; private set; }
        public TestMasterTable TestMasterTable { get; private set; }
        public UserLevelTable UserLevelTable { get; private set; }

        public MemoryDatabase(
            PersonModelTable PersonModelTable,
            QuestMasterTable QuestMasterTable,
            ItemMasterTable ItemMasterTable,
            QuestMasterEmptyValidateTable QuestMasterEmptyValidateTable,
            ItemMasterEmptyValidateTable ItemMasterEmptyValidateTable,
            SequentialCheckMasterTable SequentialCheckMasterTable,
            SingleMasterTable SingleMasterTable,
            FailTable FailTable,
            SampleTable SampleTable,
            SkillMasterTable SkillMasterTable,
            TestMasterTable TestMasterTable,
            UserLevelTable UserLevelTable
        )
        {
            this.PersonModelTable = PersonModelTable;
            this.QuestMasterTable = QuestMasterTable;
            this.ItemMasterTable = ItemMasterTable;
            this.QuestMasterEmptyValidateTable = QuestMasterEmptyValidateTable;
            this.ItemMasterEmptyValidateTable = ItemMasterEmptyValidateTable;
            this.SequentialCheckMasterTable = SequentialCheckMasterTable;
            this.SingleMasterTable = SingleMasterTable;
            this.FailTable = FailTable;
            this.SampleTable = SampleTable;
            this.SkillMasterTable = SkillMasterTable;
            this.TestMasterTable = TestMasterTable;
            this.UserLevelTable = UserLevelTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.PersonModelTable = ExtractTableData<PersonModel, PersonModelTable>(header, databaseBinary, options, xs => new PersonModelTable(xs));
            this.QuestMasterTable = ExtractTableData<QuestMaster, QuestMasterTable>(header, databaseBinary, options, xs => new QuestMasterTable(xs));
            this.ItemMasterTable = ExtractTableData<ItemMaster, ItemMasterTable>(header, databaseBinary, options, xs => new ItemMasterTable(xs));
            this.QuestMasterEmptyValidateTable = ExtractTableData<QuestMasterEmptyValidate, QuestMasterEmptyValidateTable>(header, databaseBinary, options, xs => new QuestMasterEmptyValidateTable(xs));
            this.ItemMasterEmptyValidateTable = ExtractTableData<ItemMasterEmptyValidate, ItemMasterEmptyValidateTable>(header, databaseBinary, options, xs => new ItemMasterEmptyValidateTable(xs));
            this.SequentialCheckMasterTable = ExtractTableData<SequentialCheckMaster, SequentialCheckMasterTable>(header, databaseBinary, options, xs => new SequentialCheckMasterTable(xs));
            this.SingleMasterTable = ExtractTableData<SingleMaster, SingleMasterTable>(header, databaseBinary, options, xs => new SingleMasterTable(xs));
            this.FailTable = ExtractTableData<Fail, FailTable>(header, databaseBinary, options, xs => new FailTable(xs));
            this.SampleTable = ExtractTableData<Sample, SampleTable>(header, databaseBinary, options, xs => new SampleTable(xs));
            this.SkillMasterTable = ExtractTableData<SkillMaster, SkillMasterTable>(header, databaseBinary, options, xs => new SkillMasterTable(xs));
            this.TestMasterTable = ExtractTableData<TestMaster, TestMasterTable>(header, databaseBinary, options, xs => new TestMasterTable(xs));
            this.UserLevelTable = ExtractTableData<UserLevel, UserLevelTable>(header, databaseBinary, options, xs => new UserLevelTable(xs));
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.PersonModelTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.SequentialCheckMasterTable.GetRawDataUnsafe());
            builder.Append(this.SingleMasterTable.GetRawDataUnsafe());
            builder.Append(this.FailTable.GetRawDataUnsafe());
            builder.Append(this.SampleTable.GetRawDataUnsafe());
            builder.Append(this.SkillMasterTable.GetRawDataUnsafe());
            builder.Append(this.TestMasterTable.GetRawDataUnsafe());
            builder.Append(this.UserLevelTable.GetRawDataUnsafe());
            return builder;
        }

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                PersonModelTable,
                QuestMasterTable,
                ItemMasterTable,
                QuestMasterEmptyValidateTable,
                ItemMasterEmptyValidateTable,
                SequentialCheckMasterTable,
                SingleMasterTable,
                FailTable,
                SampleTable,
                SkillMasterTable,
                TestMasterTable,
                UserLevelTable,
            });

            ((ITableUniqueValidate)PersonModelTable).ValidateUnique(result);
            ValidateTable(PersonModelTable.All, database, "RandomId", PersonModelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QuestMasterTable).ValidateUnique(result);
            ValidateTable(QuestMasterTable.All, database, "QuestId", QuestMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemMasterTable).ValidateUnique(result);
            ValidateTable(ItemMasterTable.All, database, "ItemId", ItemMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QuestMasterEmptyValidateTable).ValidateUnique(result);
            ValidateTable(QuestMasterEmptyValidateTable.All, database, "QuestId", QuestMasterEmptyValidateTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemMasterEmptyValidateTable).ValidateUnique(result);
            ValidateTable(ItemMasterEmptyValidateTable.All, database, "ItemId", ItemMasterEmptyValidateTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SequentialCheckMasterTable).ValidateUnique(result);
            ValidateTable(SequentialCheckMasterTable.All, database, "Id", SequentialCheckMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SingleMasterTable).ValidateUnique(result);
            ValidateTable(SingleMasterTable.All, database, "Id", SingleMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)FailTable).ValidateUnique(result);
            ValidateTable(FailTable.All, database, "Id", FailTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SampleTable).ValidateUnique(result);
            ValidateTable(SampleTable.All, database, "Id", SampleTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillMasterTable).ValidateUnique(result);
            ValidateTable(SkillMasterTable.All, database, "(SkillId, SkillLevel)", SkillMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)TestMasterTable).ValidateUnique(result);
            ValidateTable(TestMasterTable.All, database, "TestID", TestMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UserLevelTable).ValidateUnique(result);
            ValidateTable(UserLevelTable.All, database, "Level", UserLevelTable.PrimaryKeySelector, result);

            return result;
        }

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "people":
                    return db.PersonModelTable;
                case "quest_master":
                    return db.QuestMasterTable;
                case "item_master":
                    return db.ItemMasterTable;
                case "quest_master_empty":
                    return db.QuestMasterEmptyValidateTable;
                case "item_master_empty":
                    return db.ItemMasterEmptyValidateTable;
                case "sequantial_master":
                    return db.SequentialCheckMasterTable;
                case "single_master":
                    return db.SingleMasterTable;
                case "fail":
                    return db.FailTable;
                case "s_a_m_p_l_e":
                    return db.SampleTable;
                case "skillmaster":
                    return db.SkillMasterTable;
                case "TestMaster":
                    return db.TestMasterTable;
                case "UserLevel":
                    return db.UserLevelTable;
                
                default:
                    return null;
            }
        }

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("people", MasterMemory.Tests.Tables.PersonModelTable.CreateMetaTable());
            dict.Add("quest_master", MasterMemory.Tests.Tables.QuestMasterTable.CreateMetaTable());
            dict.Add("item_master", MasterMemory.Tests.Tables.ItemMasterTable.CreateMetaTable());
            dict.Add("quest_master_empty", MasterMemory.Tests.Tables.QuestMasterEmptyValidateTable.CreateMetaTable());
            dict.Add("item_master_empty", MasterMemory.Tests.Tables.ItemMasterEmptyValidateTable.CreateMetaTable());
            dict.Add("sequantial_master", MasterMemory.Tests.Tables.SequentialCheckMasterTable.CreateMetaTable());
            dict.Add("single_master", MasterMemory.Tests.Tables.SingleMasterTable.CreateMetaTable());
            dict.Add("fail", MasterMemory.Tests.Tables.FailTable.CreateMetaTable());
            dict.Add("s_a_m_p_l_e", MasterMemory.Tests.Tables.SampleTable.CreateMetaTable());
            dict.Add("skillmaster", MasterMemory.Tests.Tables.SkillMasterTable.CreateMetaTable());
            dict.Add("TestMaster", MasterMemory.Tests.Tables.TestMasterTable.CreateMetaTable());
            dict.Add("UserLevel", MasterMemory.Tests.Tables.UserLevelTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }
    }
}